//#include <iostream>
//#include <string>
//#include <fstream>
#include <iostream>
//#include <fstream>
//#include <sstream>
//#include <time.h>

//#include "CSVManager.h"
//#include "Vector.h"
//#include "QuickSort.h"

using namespace std;

//void myQuickSort(double* arr, int left, int right) {
//      int i = left, j = right;
//      int tmp;
//      int pivot = arr[(left + right) / 2];

//      /* partition */

//      while (i <= j)
//      {
//            while (arr[i] < pivot)
//                  i++;
//            while (arr[j] > pivot)
//                  j--;
//            if (i <= j)
//            {
//                  tmp = arr[i];
//                  arr[i] = arr[j];
//                  arr[j] = tmp;
//                  i++;
//                  j--;
//            }
//      };

//      /* recursion */
//      if (left < j)
//            myQuickSort(arr, left, j);
//      if (i < right)
//            myQuickSort(arr, i, right);
//}

//int main(int argc, char** argv)
//{
//    if (argc >= 3)
//    {
//        string command = string(argv[1]);

//        if (command == "create")
//        {
//            string arg1(argv[2]);
//            string arg2(argv[3]);

//            Vector tmp(stoi(arg1), 1000, 10);
//            string nameOfFile = arg2;
//            ofstream file(nameOfFile);
//            file << tmp;
//            cout << "Vector " << nameOfFile << " created!" << endl;
//        }
//        if (command == "sort")
//        {
//            string type(argv[2]);
//            ifstream file1(argv[3]);
//            string nameForResultMatrix(argv[4]);
//            string nameOfOutputFile(argv[5]);

//            Vector vec;

//            if(file1)
//            {
//                file1 >> vec;
//            }
//            else
//            {
//                cout << "NO THIS FILE WITH VECTOR" << endl;
//                system ("pause");
//                return -1;
//            }

//            Vector resultVector(vec.m_Size);

//            double start_time = 0;
//            double end_time = 0;
//            double search_time = 0;

//            if (type == "std")
//            {
//                Vector tmpVec = vec;
//                for (int i = 0; i < 10; i++)
//                {
//                    start_time = clock();

//                    myQuickSort(vec.m_Vector, 0, vec.m_Size - 1);

//                    end_time = clock();
//                    search_time += (end_time - start_time)/1000.0f;
//                }
//                resultVector = vec;
//            }
//            if (type == "mpi")
//            {
//                start_time = clock();

//                QuickSort sort;
//                resultVector.m_Vector = sort.run(vec);

//                end_time = clock();
//                search_time += (end_time - start_time)/1000.0f;
//            }
//            nameOfOutputFile += ".csv";
//            fstream file(nameOfOutputFile, ios::in);
//            CSVManager CSV;

//            file >> CSV;
//            file.close();
//            file.open(nameOfOutputFile, ios::out);
//            CSV.addInformation(resultVector.m_Size, 1, type, search_time);
//            file << CSV;
//            file.close();

////            ofstream fileoutput(nameForResultMatrix);
////            fileoutput << resultVector;
//        }
//        else if(command != "sort" && command != "create")
//        {
//            cout << "No this command:" << argv[1] << endl;
//        }
//    }

//    cout << "END" << endl;
//    return 0;
//}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <MPI/mpi.h>

#define SIZE 64//00000

double When();
int sort(const void* a, const void*x);
int getPivot(int* array, int size);


int main(int argc, char * argv[])
{
    int nproc, iproc;
    MPI_Status status;
    MPI_Init(&argc, &argv);

    int i = 0;
    double starttime;
    /*All for the sending / recieving */
    int* pivot=(int*)malloc(sizeof(int));
    int* send=(int*)malloc(sizeof(int));
    int* recv=(int*)malloc(sizeof(int));

    MPI_Comm_size(MPI_COMM_WORLD, &nproc);
    MPI_Comm_rank(MPI_COMM_WORLD, &iproc);

    int mySize=SIZE/nproc;

    //my values
    int* vals = (int*)malloc( SIZE * sizeof(int));
    //for holding their values that come in
    int* theirs = (int*)malloc( SIZE * sizeof(int));
    //for joining the two and
    int* tmp = (int*)malloc( SIZE * sizeof(int));

    //sort our values
    qsort(vals, mySize, sizeof(int), sort);
    cout << "Stock: ";
    for (i=0; i < mySize; i++)
    {
        vals[i] = rand();
        cout << vals[i] << " ";
    }
    /*Create the communicator for use throughout*/
    MPI_Comm newcomm;
    MPI_Comm_split(MPI_COMM_WORLD, 1, iproc, &newcomm);

    int groupSize=nproc;
    starttime = When();

    while (groupSize > 1) {
        /* Get the new rank/size */
        MPI_Comm_size(newcomm, &nproc);
        MPI_Comm_rank(newcomm, &iproc);
        //Find the Pivot
        *pivot=getPivot(vals, mySize);

        if(1){
            //send it out among the group
            MPI_Bcast(pivot, 1, MPI_INT, 0, newcomm);
        }
        else{
            //median of all in group
            if(iproc==0){
                //we recieve them all
                for (i=1; i<nproc; i++) {
                    MPI_Recv(recv, 1, MPI_INT, i, 0, newcomm, &status);
                    tmp[i]=*recv;
                }
                tmp[0]=*pivot;
                qsort(tmp, nproc, sizeof(int), sort);
                *pivot=tmp[(nproc/2)];
                //fprintf(stderr, "pivot=%i\n",*pivot);
                for (i=1; i<nproc; i++) {
                    MPI_Send(pivot, 1, MPI_INT, i, 0, newcomm);
                }

            }
            else{
                //we all send it to zero and let it decide.
                MPI_Send(pivot, 1, MPI_INT, 0, 0, newcomm);
                MPI_Recv(pivot, 1, MPI_INT, 0, 0, newcomm, &status);

            }

        }
        //calculate how many we will send
        *send=0;
        for (i=0; i<mySize; i++) {
            if(iproc < nproc / 2){
                if (vals[i] >= *pivot) {
                    tmp[*send]=vals[i];
                    (*send)++;

                }
            }
            else{
                if (vals[i] <= *pivot) {
                    tmp[*send]=vals[i];
                    (*send)++;
                }
            }
        }

        //smalls send first
        if(iproc < nproc/2){

            //send the size then the values
            //fprintf(stderr,"\t\t\t%d: sending %d to %d\n", iproc, *send, iproc+(nproc/2));
            MPI_Send(send, 1, MPI_INT, iproc+(nproc/2), 0, newcomm);
            MPI_Send(tmp, *send, MPI_INT, iproc+(nproc/2), 0, newcomm);
            //we recieve the two
            MPI_Recv(recv, 1, MPI_INT, iproc+(nproc/2), 0, newcomm, &status);
            //fprintf(stderr,"\t\t\t\t%d: reciving %d from %d\n", iproc, *recv, iproc+(nproc/2));
            MPI_Recv(theirs, *recv, MPI_INT, iproc+(nproc/2), 0, newcomm, &status);
        }
        else {

            //we recieve the two
            MPI_Recv(recv, 1, MPI_INT, iproc-(nproc/2), 0, newcomm, &status);
            //fprintf(stderr,"\t\t\t\t%d: reciving %d from %d\n", iproc, *recv, iproc-(nproc/2));
            MPI_Recv(theirs, *recv, MPI_INT, iproc-(nproc/2), 0, newcomm, &status);

            //send the size then the values
            //fprintf(stderr,"\t\t\t%d: sending %d to %d\n", iproc, *send, iproc-(nproc/2));
            MPI_Send(send, 1, MPI_INT, iproc-(nproc/2), 0, newcomm);
            MPI_Send(tmp, *send, MPI_INT, iproc-(nproc/2), 0, newcomm);
        }
        //now we combine the theirs and what is left of ours.

        if(iproc<nproc/2){
            mySize-=*send;

            for (i=0; i<*recv; i++) {
                vals[mySize]=theirs[i];
                mySize++;

            }
        }
        else{
            int off=0;
            for (i=0; i<mySize; i++) {
                if(vals[i]>= *pivot){
                    theirs[*recv+off]=vals[i];
                    off++;
                }
            }
            int* temp=vals;
            vals=theirs;
            theirs=temp;
            mySize=*recv+(mySize-*send);
        }
        //fprintf(stderr,"%d:my size:%i,\n",iproc, mySize);
        qsort(vals, mySize, sizeof(int), sort);

        //reset the size of the group
        MPI_Comm_split(newcomm, iproc < nproc/2 , iproc, &newcomm);
        groupSize /= 2;
    }

    cout << "End: ";
    for (i=0; i < mySize; i++)
    {
//        vals[i] = rand();
        cout << theirs[i] << " ";
    }

    MPI_Comm_rank(MPI_COMM_WORLD, &iproc);

    fprintf(stderr,"\n%d:done: %f elements: %i\n", iproc, (When()-starttime),mySize);
    free(vals);
    free(theirs);
    free(tmp);
    free(send);
    free(recv);

    MPI_Finalize();

    cout << "END" ;
    return 0;
}

int getPivot(int* array, int size){
    return array[rand()%size];
    //return array[size/2];
}

int sort(const void *x, const void *y) {
    return (*(int*)x - *(int*)y);
}


/* Return the correct time in seconds, using a double precision number.       */
double When()
{/*
    struct timeval tp;
    gettimeofday(&tp, NULL);
    return ((double) tp.tv_sec + (double) tp.tv_usec * 1e-6);*/
    return clock();
}
